<entry type='method' name=".tmpl" return="jQuery" plugin="jQuery Templates">
<download>
<p>This documentation topic concerns the <em> jQuery Templates</em> plugin (jquery-tmpl), which can be downloaded from: <a href="http://github.com/jquery/jquery-tmpl">http://github.com/jquery/jquery-tmpl</a>.</p>
</download>
<signature>

<argument name="data" type="Object" optional="true">
<desc>The data to render. This can be any JavaScript type, including Array or Object.</desc>
</argument>
<argument name="options" type="Options" optional="true">
<desc>An optional map of user-defined key-value pairs. Extends the <code>tmplItem</code> data structure, available to the template during rendering.</desc>
</argument>
</signature>
<desc>Take the first element in the matched set and render its content as a template, using the specified data.</desc>

<longdesc>
<p>The <code>.tmpl()</code> method is designed for chaining with <code>.appendTo</code>, <code>.prependTo</code>, <code>.insertAfter</code> or <code>.insertBefore</code> as in the following example.</p> 
<p>Example:</p> 
<pre>$( "#myTemplate" ).tmpl( myData ).appendTo( "#target" );</pre>
<p>
If <code>data</code> is an array, the template is rendered once for each data item in the array. If <code>data</code> is an object, or if the <code>data</code> parameter is missing or null, a single template item is rendered.
</p>
<p>
The return value is a jQuery collection of elements made up of the rendered template items (one for each data item in the array). If the template contains only one top-level element, then there will be one element for each data item in the array.
</p>
<p>
To insert the rendered template items into the HTML DOM, the returned jQuery collection should not be inserted directly into the DOM, but should be chained with <code>.appendTo</code>, <code>.prependTo</code>, <code>.insertAfter</code> or <code>.insertBefore</code>, as in the example above:
</p>
<p>See also <a href="http://api.jquery.com/jquery.tmpl">jQuery.tmpl()</a>.</p>
<p>The following example shows how to use <code>.tmpl()</code> to render local data using an inline template.</p>
<pre>&lt;ul id="movieList"&gt;&lt;/ul&gt;

&lt;script id="movieTemplate" type="text/x-jquery-tmpl"&gt;
    &lt;li&gt;&lt;b&gt;${Name}&lt;/b&gt; (${ReleaseYear})&lt;/li&gt;
&lt;/script&gt;

&lt;script type="text/javascript"&gt;
    var movies = [
        { Name: "The Red Violin", ReleaseYear: "1998" },
        { Name: "Eyes Wide Shut", ReleaseYear: "1999" },
        { Name: "The Inheritance", ReleaseYear: "1976" }
    ];

    // Render the template with the movies data and insert
    // the rendered HTML under the "movieList" element
    $( "#movieTemplate" ).tmpl( movies )
        .appendTo( "#movieList" );
&lt;/script&gt;
</pre>

<h4>Using Remote Data</h4>
<p>
Typically the data is not local and is instead obtained using an Ajax request to a remote service or page, as in the following example: 
</p>
<pre>
$.ajax({
    dataType: "jsonp",
    url: moviesServiceUrl,
    jsonp: "$callback",
    success: showMovies
});

// Within the callback, use .tmpl() to render the data.
function showMovies( data ) {
    // Render the template with the "movies" data and insert
    // the rendered HTML under the &#39;movieList&#39; element
    $( "#movieTemplate" ).tmpl( data )
        .appendTo( "#movieList" );
}
</pre>

<h4>The Container Element for the Template</h4>
<p>
You can get the markup for the template from inline markup in the page, or from a string (possibly computed, or obtained remotely). For an example of how to get the markup from a string, see <a href="http://api.jquery.com/jquery.tmpl">jQuery.tmpl()</a>. 
</p>
<p>
If a template is defined inline in the page, you can use  <code>$( selector ).tmpl( data )</code>, where <code>selector</code> is a selector referencing the container element that wraps the markup. The container can be any element, such as a <code>&lt;div&gt;</code> element whose style attribute includes <code>display:none</code>. However, this can result in invalid HTML or lead to side effects as a result of the browser parsing the markup and loading it into the DOM. Therefore, a preferred approach is to use a script tag such as <code>&lt;script id="myContainer" type="text/x-jquery-tmpl"&gt;</code> to wrap the markup. For the browser, the content will then be treated simply as text.  
</p>

<h4>Caching the Template</h4>
<p>
When a template is rendered, the markup is first converted into a compiled-template function. In the case of inline markup, calling <code>$( "#myContainer" ).tmpl( myData )</code> automatically causes the compiled template to be cached. (The cached template is associated with the DOM element that wraps the markup, using the jQuery <code>.data()</code> feature). 
</p>
<p>
For convenience, you can also use <code>$( "#myContainer" ).template( name )</code> so that you can reference the cached template by name. (See <a href="http://api.jquery.com/template">.template()</a> for examples).
</p>

<h4>Template Tags, Expressions, and Template Variables</h4>
<p>Template tags such as the <code>${}</code> tag can used within jQuery templates in addition to text and HTML markup to enable a number of scenarios such as composition of templates, iteration over hierarchical data, parameterization of template rendering, etc. Template tags can render content based on the values of data item fields or template variables such as <code>$item</code> (corresponding to the template item), as well as expressions and function calls. See the documentation topics for each template tag: <a href="http://api.jquery.com/template-tag-equal">${}</a>, <a href="http://api.jquery.com/template-tag-each">{{each}}</a>, <a href="http://api.jquery.com/template-tag-if">{{if}}</a>, <a href="http://api.jquery.com/template-tag-else">{{else}}</a>, <a href="http://api.jquery.com/template-tag-html">{{html}}</a>, <a href="http://api.jquery.com/template-tag-tmpl">{{tmpl}}</a> and <a href="http://api.jquery.com/template-tag-wrap">{{wrap}}</a>. </p>

<h4>The <code>options</code> Parameter, and Template Items</h4>
<p>Each template item (the result of rendering a data item with the template) is associated with a <code>tmplItem</code> data structure, which can be accessed using <a href="http://api.jquery.com/jquery.tmplitem">jQuery.tmplItem()</a> and <a href="http://api.jquery.com/tmplitem">.tmplItem()</a>, or the <code>$item</code> template variable. Any fields or anonomyous methods passed in with the <code>options</code> parameter of <code>.tmpl()</code> will extend the <code>tmplItem</code> data structure, and so be available to the template as in the following example:</p>
<h6>Code:</h6>
<pre>
// Render the template with the movies data
$( "#movieTemplate" ).tmpl( movies,
    { 
        myValue: "somevalue",
        myMethod: function() { 
            return "something";
        } 
    } 
).appendTo( "#movieList" );
</pre>
<br/>
<h6>Template:</h6>
<pre>
&lt;script id="movieTemplate" type="text/x-jquery-tmpl"&gt; 
    &lt;li&gt;
        Some content: ${$item.myMethod()}.&lt;br/&gt;
        More content: ${$item.myValue}.
    &lt;/li&gt;
&lt;/script&gt; 
</pre>
</longdesc>

<example>
<desc>Render local data using .tmpl().</desc>
<js src="http://code.jquery.com/jquery-latest.min.js" /> 
<js src="http://ajax.microsoft.com/ajax/jquery.templates/beta1/jquery.tmpl.min.js" /> 
<code><![CDATA[
var movies = [
    { Name: "The Red Violin", ReleaseYear: "1998" },
    { Name: "Eyes Wide Shut", ReleaseYear: "1999" },
    { Name: "The Inheritance", ReleaseYear: "1976" }
];

/* Render the template with the movies data and insert
   the rendered HTML under the "movieList" element */
$( "#movieTemplate" ).tmpl( movies )
    .appendTo( "#movieList" );
]]></code>
<html><![CDATA[
<tmpl id="movieTemplate" type="text/x-jquery-tmpl"> 
    <li><b>${Name}</b> (${ReleaseYear})</li>
</tmpl>

<ul id="movieList"></ul>
]]></html>
</example>

<example>
<desc>Render data from a remote service using .tmpl().</desc>
<js src="http://code.jquery.com/jquery-latest.min.js" /> 
<js src="http://ajax.microsoft.com/ajax/jquery.templates/beta1/jquery.tmpl.min.js" /> 
<code><![CDATA[
function getMovies( genre, skip, top ) {
    $.ajax({
        dataType: "jsonp",
        url: "http://odata.netflix.com/Catalog/Genres('" + genre
            + "')/Titles?$format=json&$skip="
            + skip + "&$top=" + top,
        jsonp: "$callback",
        success: function( data ) {
            /* Get the movies array from the data */
            var movies = data.d;
                    
            /* Remove current set of movie template items */
            $( "#movieList" ).empty();
            
            /* Render the template with the movies data and insert
               the rendered HTML under the "movieList" element */
            $( "#movieTemplate" ).tmpl( movies )
                .appendTo( "#movieList" );
        }
    });
}

$( "#cartoonsBtn" ).click( function() {
    getMovies( "Cartoons", 0, 6 );
});

$( "#dramaBtn" ).click( function() {
    getMovies( "Drama", 0, 6 );
});
]]></code>
<html><![CDATA[
<tmpl id="movieTemplate" type="text/x-jquery-tmpl"> 
    <li><b>${Name}</b> (${ReleaseYear})</li>
</tmpl>

<button id="cartoonsBtn">Cartoons</button>
<button id="dramaBtn">Drama</button>

<ul id="movieList"></ul>
]]></html>
</example>
</entry>
