<entry type="template-tag" name="{{tmpl( [data], [options] ) template}}" plugin="jQuery Templates">
<download>
<p>This documentation topic concerns the <em> jQuery Templates</em> plugin (jquery-tmpl), which can be downloaded from: <a href="http://github.com/jquery/jquery-tmpl">http://github.com/jquery/jquery-tmpl</a>.</p>
</download>
<signature>
<added>1.4.3</added>
<argument name="template" type="String, Element, jQuery">
<desc>The HTML markup or text to use as a template.</desc>
</argument>
<argument name="data" type="Object" optional="true">
<desc>The data to render. This can be any JavaScript type, including Array or Object.</desc>
</argument>
<argument name="options" type="Options" optional="true">
<desc>An optional map of user-defined key-value pairs. Extends the <code>tmplItem</code> data structure, available to the template during rendering.</desc>
</argument>
</signature>
<desc>Used for composition of templates. Renders one or more nested template items within the rendered output of the parent template.</desc>

<longdesc>
<p>Note: For information about how to render templates, see <a href="http://api.jquery.com/tmpl">.tmpl()</a> and <a href="http://api.jquery.com/jquery.tmpl">jQuery.tmpl()</a>.
</p> 

<h4>Template Tags</h4>
<p>Template tags such as the <code>{{tmpl}}</code> tag can be used within jQuery templates in addition to text and HTML markup, in order to enable a number of scenarios such as composition of templates, iteration over hierarchical data, parameterization of template rendering, etc. 
</p>
<p>
Other available tags include: <a href="http://api.jquery.com/template-tag-equal">${}</a>, <a href="http://api.jquery.com/template-tag-each">{{each}}</a>, <a href="http://api.jquery.com/template-tag-if">{{if}}</a>, <a href="http://api.jquery.com/template-tag-else">{{else}}</a>, <a href="http://api.jquery.com/template-tag-html">{{html}}</a> and <a href="http://api.jquery.com/template-tag-wrap">{{wrap}}</a>. User-defined template tags can also be specified, by extending the <code>jQuery.tmpl.tag</code> map.</p> 

<h4>Using the {{tmpl}} Template Tag</h4>
<p>
The following example shows how to use <code>{{tmpl}}</code> to render a nested template.
</p>
<pre>
&lt;script id="movieTemplate" type="text/x-jquery-tmpl"&gt; 
    {{tmpl "#titleTemplate"}}
    &lt;tr class="detail"&gt;&lt;td&gt;Director: ${Director}&lt;/td&gt;&lt;/tr&gt;
&lt;/script&gt;

&lt;script id="titleTemplate" type="text/x-jquery-tmpl"&gt; 
    &lt;tr class="title"&gt;&lt;td&gt;${Name}&lt;/td&gt;&lt;/tr&gt;
&lt;/script&gt;
</pre>

<p>The <code>template</code> parameter can be any of the following: </p>
<ul>
<li>A string containing markup.</li>
<li>An HTML element (or jQuery object that wraps an element) whose content is to be used as the template.</li>
<li>A string corresponding to the name of a named template (see <a href="http://api.jquery.com/jquery.template">jQuery.template()</a> and <a href="http://api.jquery.com/template">.template()</a>).</li>
<li>A compiled-template function (see <a href="http://api.jquery.com/jquery.template">jQuery.template()</a> and <a href="http://api.jquery.com/template">.template()</a>).</li>
</ul>

<p>
If <code>data</code> is an array, the template is rendered once for each data item in the array. If <code>data</code> is an object, or if the <code>data</code> parameter is missing or null, a single template item is rendered.
</p>

<p>
The following example shows how to iterate over hierarchical data, by passing a <code>data</code> parameter to the a nested <code>{{tmpl}}</code> tag.
</p>
<h6>Templates:</h6>
<pre>
&lt;script id="movieTemplate" type="text/x-jquery-tmpl"&gt; 
    &lt;tr&gt;
        &lt;td&gt;${Name}&lt;/td&gt;
        &lt;td&gt;{{tmpl(Languages) "#languageTemplate"}}&lt;/td&gt;
    &lt;/tr&gt;
&lt;/script&gt;

&lt;script id="languageTemplate" type="text/x-jquery-tmpl"&gt; 
    &lt;em&gt;${Name}&lt;/em&gt;
&lt;/script&gt;
</pre>
<h6>Data:</h6> 
<pre>
var movies = [
    { Name: "Meet Joe Black", Languages: ["English", "French"] },
    { Name: "The Mighty", Languages: ["English"] },
    { Name: "City Hunter", Languages: ["Mandarin", "Cantonese"] }
];</pre>

<h4>Recursive Nested {{tmpl}} Tags</h4>
<p>
A template may contain a <code>{{tmpl}}</code> or <code>{{wrap}}</code> tag referencing the same template. The following example uses a recursive template to create a tree view:
</p>
<h6>Templates:</h6>
<pre>
&lt;script id="folderTmpl" type="text/x-jquery-tmpl"&gt;
    &lt;li class="toggle"&gt;
        &lt;span class="expand"&gt;${expanderSymbol($item)}&lt;/span&gt;
        &lt;span&gt;${name}&lt;/span&gt;
    &lt;/li&gt;
    {{if expanded}}
        &lt;li&gt;
            &lt;ul&gt;{{tmpl(getFolderItems($item)) "#itemTmpl"}}&lt;/ul&gt;
            &lt;ul&gt;{{tmpl(getSubFolders($item)) "#folderTmpl"}}&lt;/ul&gt;
        &lt;/li&gt;
    {{/if}}
&lt;/script&gt;

&lt;script id="itemTmpl" type="text/x-jquery-tmpl"&gt;
    &lt;li class="folderItem"&gt;${name}&lt;/li&gt;
&lt;/script&gt;
</pre>
<h6>Data:</h6> 
<pre>
// Hierarchy of named folders 
var folders = {
    name: "Samples",
    folders: [
        { name: "API", folders: [
            { name: ".tmpl()"}
        ]},
        { name: "Template markup", folders: [
            { name: "Tags", folders: [
                { name: "{{wrap}}"}
            ]},
        ]},
    ]
};

// Array for the folder items. Each item can show up in one or more folders
var samples = [
    { name: "Template in script block", 
        folders: [ ".tmpl()" ], 
        description: "Rendering a template declared in script block" },
    { name: "Tab View", 
        folders: [ "{{wrap}}", ".tmpl()" ], 
        description: "A tab view, using {{wrap}}" }
];
</pre>

</longdesc>

<example>
<desc>Using {{tmpl}} to render a nested template.</desc>
<js src="http://code.jquery.com/jquery-latest.min.js" /> 
<js src="http://ajax.microsoft.com/ajax/jquery.templates/beta1/jquery.tmpl.min.js" /> 
<code><![CDATA[
var movies = [
    { Name: "The Red Violin", Director: "FranÃ§ois Girard" },
    { Name: "Eyes Wide Shut", Director: "Stanley Kubrick" },
    { Name: "The Inheritance", Director: "Mauro Bolognini" }
];

/* Render the template with the movies data */
$( "#movieTemplate" ).tmpl( movies ).appendTo( "#movieList" );
]]></code>
<css><![CDATA[
table { border-collapse:collapse; border:2px solid blue; margin:5px; background-color:#f8f8f8; }
table tr { border:1px solid blue; } table td { padding:2px; }
.title { border-bottom:none; } .detail { border-top:none; }
]]></css>
<html><![CDATA[
<tmpl id="movieTemplate" type="text/x-jquery-tmpl"> 
    {{tmpl "#titleTemplate"}}
    <tr class="detail"><td>Director: ${Director}</td></tr>
</tmpl>

<tmpl id="titleTemplate" type="text/x-jquery-tmpl"> 
    <tr class="title"><td>${Name}</td></tr>
</tmpl>

<table><tbody id="movieList"></tbody></table>
]]></html>
</example>

<example>
<desc>Using <code>{{tmpl}}</code> to render hierarchical data.</desc>
<js src="http://code.jquery.com/jquery-latest.min.js" /> 
<js src="http://ajax.microsoft.com/ajax/jquery.templates/beta1/jquery.tmpl.min.js" /> 
<code><![CDATA[
function getMovies( genre, skip, top ) {
    $.ajax({
        dataType: "jsonp",
        url: "http://odata.netflix.com/Catalog/Genres('" + genre
            + "')/Titles?$format=json&$expand=Languages&$skip="
            + skip + "&$top=" + top,
        jsonp: "$callback",
        success: function( data ) {
            /* Get the movies array from the data */
            var movies = data.d.results;

            /* Remove current set of movie template items */
            $( "#movieList" ).empty();
            
            /* Render the template with the movies data and insert
               the rendered HTML under the "movieList" element */
            $( "#movieTemplate" ).tmpl( movies )
                .appendTo( "#movieList" );
        }
    });
}

$( "#foreignBtn" ).click( function() {
    getMovies( "Foreign", 0, 4 );
});

$( "#dramaBtn" ).click( function() {
    getMovies( "Drama", 0, 4 );
});
]]></code>
<css><![CDATA[
table {float:left;clear:right;border-collapse:collapse;width:370px;background-color:#f8f8f8;margin:4px;} table td {border:1px solid blue;padding:3px;}
table th {font-weight:bold;border:2px solid blue;padding:1px;} table tbody {border:2px solid blue;} button {float:left;margin:4px;width:70px;}
]]></css>
<html><![CDATA[
<tmpl id="movieTemplate" type="text/x-jquery-tmpl"> 
    <tr>
        <td>${Name}</td>
        <td>{{tmpl(Languages.results) "#languageTemplate"}}</td>
    </tr>
</tmpl>

<tmpl id="languageTemplate" type="text/x-jquery-tmpl"> 
    <em>${Name} </em>
</tmpl>

<table><tbody><tr><th>Title</th><th>Languages</th></tr></tbody>
<tbody id="movieList"></tbody></table>
<button id="foreignBtn">Foreign</button>
<button id="dramaBtn">Drama</button>
]]></html>
</example>

<example>
<desc>Using the <code>options</code> parameter of the <code>{{tmpl}}</code> tag to provide a <code>showLanguage</code> method.</desc>
<js src="http://code.jquery.com/jquery-latest.min.js" /> 
<js src="http://ajax.microsoft.com/ajax/jquery.templates/beta1/jquery.tmpl.min.js" /> 
<code><![CDATA[
function getMovies( genre, skip, top ) {
    $.ajax({
        dataType: "jsonp",
        url: "http://odata.netflix.com/Catalog/Genres('" + genre
            + "')/Titles?$format=json&$expand=Languages&$skip="
            + skip + "&$top=" + top,
        jsonp: "$callback",
        success: function( data ) {
            /* Get the movies array from the data */
            var movies = data.d.results;

            /* Remove current set of movie template items */
            $( "#movieList" ).empty();

            /* Render the template items for each movie.
               Pass in the languageOptions map which will be used as
               options parameter on the nested "languageTemplate" template.
               The 'showLanguage' method will be called by the nested template. */
            $( "#movieTemplate" ).tmpl( movies, {
                languageOptions: {
                    showLanguage: function showLanguage( name ) {
                        return name.toUpperCase();
                    }
                }
            }).appendTo( "#movieList" );
        }
    });
}

$( "#foreignBtn" ).click( function() {
    getMovies( "Foreign", 0, 4 );
});

$( "#dramaBtn" ).click( function() {
    getMovies( "Drama", 0, 4 );
});
]]></code>
<css><![CDATA[
table {float:left;clear:right;border-collapse:collapse;width:370px;background-color:#f8f8f8;margin:4px;} table td {border:1px solid blue;padding:3px;}
table th {font-weight:bold;border:2px solid blue;padding:1px;} table tbody {border:2px solid blue;} button {float:left;margin:4px;width:70px;}
]]></css>
<html><![CDATA[
<tmpl id="movieTemplate" type="text/x-jquery-tmpl"> 
    <tr>
        <td>${Name}</td>
        <td>{{tmpl(Languages.results, $item.languageOptions) "#languageTemplate"}}</td>
    </tr>
</tmpl>

<tmpl id="languageTemplate" type="text/x-jquery-tmpl"> 
    <em>${$item.showLanguage(Name)} </em>
</tmpl>

<table><tbody><tr><th>Title</th><th>Languages</th></tr></tbody>
<tbody id="movieList"></tbody></table>
<button id="foreignBtn">Foreign</button>
<button id="dramaBtn">Drama</button>
]]></html>
</example>

<example>
<desc>A tree view, using recursive nested {{tmpl}} tags.</desc>
<js src="http://code.jquery.com/jquery-latest.min.js" /> 
<js src="http://ajax.microsoft.com/ajax/jquery.templates/beta1/jquery.tmpl.min.js" /> 
<code><![CDATA[
 /* Hierarchy of named folders */ 
var folders = {
    name: "Samples",
    folders: [
        { name: "API", folders: [
            { name: ".tmpl()"}
        ]},
        { name: "Template markup", folders: [
            { name: "Tags", folders: [
                { name: "{{wrap}}"}
            ]},
        ]},
    ]
};

/* Array for the folder items. Each item can show up in one or more folders */
var samples = [
    { name: "Template in script block", 
        folders: [ ".tmpl()" ], 
        description: "Rendering a template declared in script block" },
    { name: "Template as string", 
        folders: [ ".tmpl()" ], 
        description:"Rendering a template passed as a string" },
    { name: "Render remote data", 
        folders: [ "API" ], 
        description: "Rendering remote data using templates" },
    { name: "Tab View", 
        folders: [ "{{wrap}}", ".tmpl()" ], 
        description: "A tab view, using {{wrap}}" }
];

/* Declare the functions for getting the items and subfolders, etc. 
   These could be simple global functions. 
   (Here we are adding them to the window object, which is equivalent). */
$.extend( window, { 
    getFolderItems: function( tmplItem ) {
        return $.map( samples, function( sample ) {
            return $.inArray( tmplItem.data.name, sample.folders ) > -1 ? sample : null;
        });
    }, 
    getSubFolders: function( tmplItem ) {
        return tmplItem.data.folders || [];
    }, 
    expanderSymbol: function( tmplItem ) {
        return tmplItem.data.expanded ? "-" : "+";
    }
});

$( "#folderTmpl" ).tmpl( folders ).appendTo( "#samplesList" );

$( "#samplesList" )
    .delegate( ".toggle", "click", function() {
        /* Toggle expanded property on data, then update rendering */
        var tmplItem = $.tmplItem( this );
        tmplItem.data.expanded = !tmplItem.data.expanded;
        tmplItem.update();
    })
    .delegate( ".folderItem", "click", function() {
        alert( $.tmplItem( this ).data.description );
    });
]]></code>
<css><![CDATA[
.treeView li li {margin-left:18px;} .expand {vertical-align:middle;margin-right:7px;display:inline-block;border:1px solid #555;text-align:center;height:12px;width:12px;line-height:11px;background-color:#f8f8f8;color:Blue;} 
.treeView, .treeView ul {padding:0;margin:0;} .treeView li {margin-left:8px;list-style-type:none;padding:2px;cursor:pointer;} .treeView li.folderItem {color:Blue;text-decoration:underline;font-style:italic;margin-bottom:4px;}
]]></css>
<html><![CDATA[
<tmpl id="folderTmpl" type="text/x-jquery-tmpl">
    <li class="toggle">
        <span class="expand">${expanderSymbol($item)}</span>
        <span>${name}</span>
    </li>
    {{if expanded}}
        <li>
            <ul>{{tmpl(getFolderItems($item)) "#itemTmpl"}}</ul>
            <ul>{{tmpl(getSubFolders($item)) "#folderTmpl"}}</ul>
        </li>
    {{/if}}
</tmpl>

<tmpl id="itemTmpl" type="text/x-jquery-tmpl">
    <li class="folderItem">${name}</li>
</tmpl>

<ul id="samplesList" class="treeView"><li></li></ul>
]]></html>
</example>
</entry>