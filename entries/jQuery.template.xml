<entries>
<entry type='method' name="jQuery.template" return="function" plugin="jQuery Templates">
<download>
<p>This documentation topic concerns the <em> jQuery Templates</em> plugin (jquery-tmpl), which can be downloaded from: <a href="http://github.com/jquery/jquery-tmpl">http://github.com/jquery/jquery-tmpl</a>.</p>
</download>
<signature>
<added>1.4.3</added>
<argument name="name" type="String">
    <desc>A string naming the compiled template.</desc>
</argument>
<argument name="template" type="String, Element, jQuery">
    <desc>The HTML markup and/or text to be used as template. Can be a string, or an HTML element (or jQuery object wrapping an element) whose content is to be used as template</desc>
</argument>
</signature>
<desc>Create a reusable named template (compiled from markup).</desc> 

<longdesc>
<p>Note: For information about how to render templates, see <a href="http://api.jquery.com/tmpl">.tmpl()</a> and <a href="http://api.jquery.com/jquery.tmpl">jQuery.tmpl()</a>.</p>

<p>This method compiles the markup in the <code>template</code> parameter as a named template, which can be referenced using the string specified in the <code>name</code> parameter.
</p>
<p>
The return value is the compiled-template function. 
</p>
<p>See also <a href="http://api.jquery.com/template">template()</a>.</p>

<blockquote>
  <p>Note: The named template is added to the <code>$.template</code> map.</p>
  <ul>
    <li>To determine if a string <code>"someName"</code> is the name of a named template, test whether <code>$.template["someName"]</code> is defined.</li>
    <li>To remove a previously created named template, use<br/> <code>delete $.template["someName"];</code></li>
  </ul>
</blockquote>
<p>
<strong>Example:</strong> Create a compiled template associated with the name "summaryTemplate" and then reference it by name for rendering: 
</p>
<pre>
// Convert the markup string into a named template
$.template( "summaryTemplate", "&lt;li&gt;${Name}&lt;/li&gt;" );

function renderList() {
    // Render the movies data using the named template: "summaryTemplate"
    $.tmpl( "summaryTemplate", movies ).appendTo( "#moviesList" );
}
</pre>
<p>
<strong>Example:</strong> Use the return value rather than the <code>name</code> string to reference the compiled template:
</p>
<pre>
// Convert the markup string into a compiled template
var myTemplate = $.template( null, "&lt;li&gt;${Name}&lt;/li&gt;" ); 

function renderList() {
    // Render movies data using the compiled template: myTemplate
    $.tmpl( myTemplate, movies ).appendTo( "#moviesList" );
}
</pre>
<p>
<strong>Example:</strong> Create a named template and reference it by name as a nested template: 
</p>
<pre>
&lt;script id="movieTemplate" type="text/x-jquery-tmpl"&gt;
    {{tmpl "summaryTemplate"}}
    &lt;tr&gt;&lt;td&gt;Director: ${Director}&lt;/td&gt;&lt;/tr&gt;
&lt;/script&gt;
___________

// Convert the markup string into a named template,
// referenced by the {{tmpl}} tag
$.template( "summaryTemplate", "&lt;tr&gt;&lt;td&gt;${Name}&lt;/td&gt;&lt;/tr&gt;" );

// Render the movies data, using the named template as a nested template
$( "#movieTemplate" ).tmpl( movies ).appendTo( "#movieList" );
</pre>

<h4 id="optimizing-template-rendering">Optimizing Template Rendering</h4>
<p>
When a template is rendered, using <a href="http://api.jquery.com/tmpl">.tmpl()</a> or <a href="http://api.jquery.com/jquery.tmpl">jQuery.tmpl()</a>, the markup is first converted into a compiled-template function. In the case of markup obtained from a string, the use of <code>.template()</code> as in the above examples ensures that the conversion from markup to a compiled-template function only happens once. 
</p>
<p>
On the other hand, passing a markup string template directly to <code>.tmpl()</code> or to <code>{{tmpl}}</code> for rendering will not be optimal from a performance point of view, since the markup will be re-compiled every time:
</p>
<pre>
var markup = "&lt;li&gt;${Name}&lt;/li&gt;";

function renderList() {
  // Sub-optimal: the markup string will be
  // recompiled each time renderList is called
  $.tmpl( markup, movies ).appendTo( "#moviesList" );
}
</pre>
<p>
Note: In the case of inline templates declared within a script block, caching occurs automatically, so the following example <em>does</em> correspond to best practice:
</p>
<p>
<strong>Example:</strong> Rendering an inline template directly without compiling as a named template.
</p>
<pre>
&lt;script id="summaryTemplate" type="text/x-jquery-tmpl"&gt;
    &lt;li&gt;${Name}&lt;/li&gt;
&lt;/script&gt;
___________

function renderList() {
  // The template will be compiled only once,
  // so this is approach can be optimal.
  $( "#summaryTemplate" ).tmpl( movies ).appendTo( "#moviesList" );
}
</pre>

</longdesc>

<example>
<desc>Render template obtained from a markup string.</desc>
<js src="http://code.jquery.com/jquery-latest.min.js" /> 
<js src="http://ajax.microsoft.com/ajax/jquery.templates/beta1/jquery.tmpl.min.js" /> 
<code><![CDATA[
  var movies = [
  { Name: "The Red Violin", ReleaseYear: "1998", Director: "François Girard" },
  { Name: "Eyes Wide Shut", ReleaseYear: "1999", Director: "Stanley Kubrick" },
  { Name: "The Inheritance", ReleaseYear: "1976", Director: "Mauro Bolognini" }
  ];

var markup = "<tr><td colspan='2'>${Name}</td><td>Released: ${ReleaseYear}</td><td>Director: ${Director}</td></tr>"

/* Compile markup string as a named template */
$.template( "movieTemplate", markup );

/* Render the named template */
$( "#showBtn" ).click( function() {
  $( "#movieList" ).empty();
  $.tmpl( "movieTemplate", movies ).appendTo( "#movieList" );
});
]]></code>
<css><![CDATA[
table { border-collapse:collapse; margin:8px; background-color:#f8f8f8; }
table td { border:1px solid blue; padding:3px; }
]]></css>
<html><![CDATA[
<button id="showBtn">Show movies</button><br/>
<table><tbody id="movieList"></tbody></table>
]]></html>
</example>

<example>
<desc>Switch between templates obtained from markup strings.</desc>
<js src="http://code.jquery.com/jquery-latest.min.js" /> 
<js src="http://ajax.microsoft.com/ajax/jquery.templates/beta1/jquery.tmpl.min.js" /> 
<code><![CDATA[
var movies = [
  { Name: "The Red Violin", ReleaseYear: "1998", Director: "François Girard" },
  { Name: "Eyes Wide Shut", ReleaseYear: "1999", Director: "Stanley Kubrick" },
  { Name: "The Inheritance", ReleaseYear: "1976", Director: "Mauro Bolognini" }
];

function renderTemplate( container, template, data ) {
  $( container ).empty();
  $.tmpl( template, data ).appendTo( container );
}

/* Compile markup as named templates */
$.template(
  "titleTemplate",
  "<tr><td>${Name}</td></tr>"
);
$.template(
  "detailTemplate",
  "<tr><td colspan='2'>${Name}</td><td>Released: ${ReleaseYear}</td><td>Director: ${Director}</td></tr>"
);

var details = false;

$( "#switchBtn" ).click( function() {
  details = !details;
  $(this).text( details ? "Show titles" : "Show full details" );
  /* Render using the other named template */
  renderTemplate( "#movieList", (details ? "detailTemplate" : "titleTemplate"), movies );
});

renderTemplate( "#movieList", "titleTemplate", movies );
]]></code>
<css><![CDATA[
table { border-collapse:collapse; margin:8px; background-color:#f8f8f8; }
table td { border:1px solid blue; padding:3px; }
]]></css>
<html><![CDATA[
<button id="switchBtn">Show full details</button><br/>
<table><tbody id="movieList"></tbody></table>
]]></html>
</example>

<example height="340">
<desc>Use a markup string as a nested template.</desc>
<js src="http://code.jquery.com/jquery-latest.min.js" /> 
<js src="http://ajax.microsoft.com/ajax/jquery.templates/beta1/jquery.tmpl.min.js" /> 
<code><![CDATA[
var movies = [
  { Name: "The Red Violin", Director: "François Girard" },
  { Name: "Eyes Wide Shut", Director: "Stanley Kubrick" },
  { Name: "The Inheritance", Director: "Mauro Bolognini" }
];

/* Convert the markup string into a named template,
   referenced by the {{tmpl}} tag */
$.template( "titleTemplate", "<tr class='title'><td>${Name}</td></tr>" );

/* Render the movies data, using the named template as a nested template */
$( "#movieTemplate" ).tmpl( movies ).appendTo( "#movieList" );
]]></code>
<css><![CDATA[
table { border-collapse:collapse; border:2px solid blue; margin:8px; background-color:#f8f8f8; }
table tr { border:1px solid blue; } table td { padding:2px; }
.title { border-bottom:none; } .detail { border-top:none; }
]]></css>
<html><![CDATA[
<tmpl id="movieTemplate" type="text/x-jquery-tmpl"> 
  {{tmpl "titleTemplate"}}
  <tr class="detail"><td>Director: ${Director}</td></tr>
</tmpl>

<table><tbody id="movieList"></tbody></table>
]]></html>
</example>
</entry>

<entry type='method' name="jQuery.template" return="function" plugin="jQuery Templates">
<download>
<p>This documentation topic concerns the <em> jQuery Templates</em> plugin (jquery-tmpl), which can be downloaded from: <a href="http://github.com/jquery/jquery-tmpl">http://github.com/jquery/jquery-tmpl</a>.</p>
</download>
<signature>
<added>1.4.3</added>
<argument name="template" type="String">
<desc>The template markup to be compiled, or a string corresponding to a named template.</desc>
</argument>
</signature>
<desc>Returns a compiled-template function.</desc> 

<longdesc>
<p>Note: For information about how to render templates, see <a href="http://api.jquery.com/tmpl">.tmpl()</a> and <a href="http://api.jquery.com/jquery.tmpl">jQuery.tmpl()</a>.</p>
<p>
If the <code>template</code> parameter is the name string for a named template created using <code>$.template( name, template )</code>, this method returns the compiled template for the named template (equivalent to <code>$.template[name]</code>).
</p>
<p>
Otherwise, if the <code>template</code> parameter is a string containing HTML markup, then this method will return a compiled template for the markup provided.
</p>
<p>
If the <code>template</code> parameter is a string containing pure text (no HTML tags), then the string is treated as a selector for an inline template, whose content will be used as markup. Similarly if <code>template</code> is an HTML element (or jQuery object wrapping an element), then the content will be used as markup for the returned compiled template.
</p>
<p>
<strong>Example:</strong> Switch the template item to a different template, using $.template( name ), : 
<pre><![CDATA[
// Create the compiled templates
$.template( "summaryTemplate", "<tr>...</tr>" );
$.template( "detailTemplate", "<tr>...</tr>" );

// Render the summaryTemplate with the "movies" data 
$.tmpl( "summaryTemplate", movies ).appendTo( "#movieList" );

$( "tr" ).click( function () {
    // Switch the template for this template item to
    // a different named template, then update the rendered item
    var tmplItem = $.tmplItem(this);
    tmplItem.tmpl = $.template( "detailTemplate" );
    tmplItem.update();
});
]]></pre>
</p>

</longdesc>

<example>
<desc>Dynamic switching of templates, using $.template() to obtain compiled template.</desc>
<js src="http://code.jquery.com/jquery-latest.min.js" /> 
<js src="http://ajax.microsoft.com/ajax/jquery.templates/beta1/jquery.tmpl.min.js" /> 
<code><![CDATA[
var movies = [
  { Name: "The Red Violin", ReleaseYear: "1998", Director: "François Girard" },
  { Name: "Eyes Wide Shut", ReleaseYear: "1999", Director: "Stanley Kubrick" },
  { Name: "The Inheritance", ReleaseYear: "1976", Director: "Mauro Bolognini" }
];

var selectedItem = null;

/* Create the compiled templates */
$.template(
  "summaryTemplate",
  "<tr class='movieSummary'><td colspan='2'>${Name}</td></tr>"
);
$.template(
  "detailTemplate",
  "<tr class='movieDetail row1'><td colspan='2'>${Name}</td></tr><tr class='movieDetail row2'><td>${ReleaseYear}</td><td>Director: ${Director}</td></tr>"
);

/* Render the summaryTemplate with the "movies" data */ 
$.tmpl( "summaryTemplate", movies ).appendTo( "#movieList" );

$( "#movieList" )
.delegate( ".movieSummary", "click", function () {
  if (selectedItem) {
    /* Switch the template for this template item to
    the named template, then update the rendered item */
    selectedItem.tmpl = $.template( "summaryTemplate" );
    selectedItem.update();
  }
  selectedItem = $.tmplItem(this);
  /* Switch the template for this template item */
  selectedItem.tmpl = $.template( "detailTemplate" );
  selectedItem.update();
})
.delegate( ".movieDetail", "click", function () {
  /* Switch the template for this template item */
  selectedItem.tmpl = $.template( "summaryTemplate" );
  selectedItem.update();
  selectedItem = null;
});
]]></code>
<css><![CDATA[
  table { cursor:pointer; border-collapse:collapse; 
        border:2px solid blue; width:300px; margin:8px; }
  table tr { border:1px solid blue; color:blue; background-color:#f8f8f8; } 
  table td { padding:3px; } table tr:hover { color:red; }
  .movieDetail { background-color:yellow; } 
  .movieDetail.row1 { border-bottom:none; } 
  .movieDetail.row2 { border-top:none; }
]]></css>
<html><![CDATA[
Click for details:
<table><tbody id="movieList"></tbody></table>
]]></html>
</example>
</entry>
</entries>