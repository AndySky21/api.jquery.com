<entry type="template-tag" name="${fieldNameOrExpression}" plugin="jQuery Templates">
<download>
<p>This documentation topic concerns the <em> jQuery Templates</em> plugin (jquery-tmpl), which can be downloaded from: <a href="http://github.com/jquery/jquery-tmpl">http://github.com/jquery/jquery-tmpl</a>.</p>
</download>
<signature>
<added>1.4.3</added>
<argument name="fieldNameOrExpression" type="String, Object, Function">
<desc>The name of a field on the current data item, or a JavaScript function or expression to be evaluated.</desc>
</argument>
</signature>
<desc>Used for insertion of data values in the rendered template. Evaluates the specified field (property) on the current data item, or the specified JavaScript function or expression.</desc>

<longdesc>
<p>Note: For information about how to render templates, see <a href="http://api.jquery.com/tmpl">.tmpl()</a> and <a href="http://api.jquery.com/jquery.tmpl">jQuery.tmpl()</a>.
</p> 

<h4>Template Tags</h4>
<p>Template tags such as the <code>${}</code> tag can be used within jQuery templates in addition to text and HTML markup to enable a number of scenarios such as composition of templates, iteration over hierarchical data, parameterization of template rendering, etc. 
</p>
<p>
Other available tags include: <a href="http://api.jquery.com/template-tag-each">{{each}}</a>, <a href="http://api.jquery.com/template-tag-if">{{if}}</a>, <a href="http://api.jquery.com/template-tag-else">{{else}}</a>, <a href="http://api.jquery.com/template-tag-html">{{html}}</a>, <a href="http://api.jquery.com/template-tag-tmpl">{{tmpl}}</a> and <a href="http://api.jquery.com/template-tag-wrap">{{wrap}}</a>. <br/>Note: User-defined template tags can also be specified, by extending the <code>jQuery.tmpl.tag</code> map.</p> 

<h4>Using the ${} Template Tag</h4>
<p>
The following example shows how to use <code>${}</code> to insert the values of the data item fields: <code>Name</code> and <code>ReleaseYear</code>.
</p>
<pre>&lt;script id="movieTemplate" type="text/x-jquery-tmpl"&gt;
    &lt;li&gt;&lt;b&gt;${Name}&lt;/b&gt; was released in ${ReleaseYear}.&lt;/li&gt;
&lt;/script&gt;

&lt;script type="text/javascript"&gt;
    var movies = [
        { Name: "The Red Violin", ReleaseYear: "1998" },
        { Name: "Eyes Wide Shut", ReleaseYear: "1999" },
        { Name: "The Inheritance", ReleaseYear: "1976" }
    ];

    // Render the template with the movies data and insert
    // the rendered HTML under the "movieList" element
    $( "#movieTemplate" ).tmpl( movies )
        .appendTo( "#movieList" );
&lt;/script&gt;

&lt;ul id="movieList"&gt;&lt;/ul&gt;</pre>

<p>
The <code>${field}</code> syntax is a shortened form of the alternative syntax: <code>{{= field}}</code>. The following is equivalent to the template used in the example above:
</p>
<pre>&lt;li&gt;&lt;b&gt;{{= Name}}&lt;/b&gt; was released in {{= ReleaseYear}}.&lt;/li&gt;</pre>

<h4>Evaluating Expressions and Functions</h4>
<p>
In the following example <code>${expression}</code> is used to evaluate a simple expression:
</p>
<h6>Template:</h6>
<pre>
&lt;tr&gt;&lt;td&gt;${Languages.length}&lt;/td&gt;&lt;/tr&gt;
</pre>
<h6>Data:</h6> 
<pre>
var movies = [
    { Name: "Meet Joe Black", Languages: ["English", "French"] },
    { Name: "The Mighty", Languages: ["English"] },
    { Name: "City Hunter", Languages: ["Mandarin", "Cantonese"] }
</pre>

<p>
For more complex expressions it is preferable to place the expression within a function, then use <code>${myFunction(a,b)}</code> to call the function, as in:
</p>
<h6>Template:</h6>
<pre>
&lt;tr&gt;&lt;td&gt;${getLanguages(Languages, " - ")}&lt;/td&gt;&lt;/tr&gt;
</pre>
<h6>Code:</h6>
<pre>
function getLanguages( data, separator ) {
    return data.join( separator );
}
</pre>

<p>
The above example requires the function <code>getLanguages</code> to be available in global scope. An alternative approach which does not require a global variable is to add the function to the template item, by passing it in with the <code>options</code> parameter of <code>.tmpl()</code>:
</p>
<h6>Template:</h6>
<pre>
&lt;tr&gt;&lt;td&gt;${$item.getLanguages(" - ")}&lt;/td&gt;&lt;/tr&gt;
</pre>
<h6>Code:</h6>
<pre>
// Render the template with the movies data
$( "#movieTemplate" ).tmpl( movies, { 
    getLanguages: function( separator ) {
        return this.data.Languages.join( separator );
    }
}).appendTo( "#movieList" );
</pre>
<p>
Note the use of the <code>$item</code> template variable, above (see the next section), which corresponds to the template item. In the call to <code>$item.getLanguages()</code>, the <code>this</code> pointer within the function is therefore the template item, and provides access to <code>this.data</code> etc.
</p>

<h4>The $item and $data Template Variables</h4>
<p>
The following variables are exposed to expression evaluation within templates:
</p>
<ul>
    <li><code>$</code>: The jQuery object.</li>
    <li><code>$item</code>: The current template item - which allows access to <code>$item.data</code>, <code>$item.parent</code>, etc. as well as any user-defined values or methods passed in with the options map.</li>
    <li><code>$data</code>: The current data item (equivalent to <code>$item.data</code>).</li>
    <li>Note: A template tag with content such as <code>{{each}}...{{/each}}</code> may expose additional variables to template evaluation within the content. In the case of <a href="http://api.jquery.com/template-tag-each">{{each}}</a>, for example, the additional template variables <code>$value</code> and <code>$index</code> are provided within the content of the <code>{{each}}</code> tag.</li>
</ul>

<h4>HTML encoding</h4>
<p>
The values rendered by <code>${}</code> are evaluated as strings, and are HTML encoded. Any embedded markup will therefore be encoded. To insert the unencoded markup in the rendered template, use instead the <a href="http://api.jquery.com/template-tag-html">{{html}}</a> template tag.
</p>


</longdesc>

<example>
<desc>Using <code>${}</code> to render values of data item fields.</desc>
<js src="http://code.jquery.com/jquery-latest.min.js" /> 
<js src="http://ajax.microsoft.com/ajax/jquery.templates/beta1/jquery.tmpl.min.js" /> 
<code><![CDATA[
var movies = [
    { Name: "The Red Violin", ReleaseYear: "1998" },
    { Name: "Eyes Wide Shut", ReleaseYear: "1999" },
    { Name: "The Inheritance", ReleaseYear: "1976" }
];

/* Render the template with the movies data */
$( "#movieTemplate" ).tmpl( movies )
    .appendTo( "#movieList" );
]]></code>
<html><![CDATA[
<tmpl id="movieTemplate" type="text/x-jquery-tmpl"> 
    <li><b>${Name}</b> was released in ${ReleaseYear}.</li>
</tmpl>

<ul id="movieList"></ul>
]]></html>
</example>

<example>
<desc>Using <code>${}</code> to evaluate an expression or call a function.</desc>
<js src="http://code.jquery.com/jquery-latest.min.js" /> 
<js src="http://ajax.microsoft.com/ajax/jquery.templates/beta1/jquery.tmpl.min.js" /> 
<code><![CDATA[
var movies = [
    { Name: "Meet Joe Black", Languages: ["English", "French"] },
    { Name: "The Mighty", Languages: ["English"] },
    { Name: "City Hunter", Languages: ["Mandarin", "Cantonese"] }
];

/* Render the template with the movies data */
$( "#movieTemplate" ).tmpl( movies, { 
    getLanguages: function( separator ) {
        return this.data.Languages.join( separator );
    }
}).appendTo( "#movieList" );
]]></code>
<css><![CDATA[
table { border-collapse:collapse; width:400px; background-color:#f8f8f8; margin:10px; } table td { border:1px solid blue; padding:3px; } 
table th { font-weight:bold; border:2px solid blue; padding:1px; } table tbody { border:2px solid blue; }
]]></css>
<html><![CDATA[
<tmpl id="movieTemplate" type="text/x-jquery-tmpl"> 
    <tr>
        <td>${Name}</td>
        <td>${Languages.length}</td>
        <td>${$item.getLanguages(" - ")}</td>
    </tr>
</tmpl>

<table><tbody><tr><th>Title</th><th>Versions</th><th>Languages</th></tr></tbody>
<tbody id="movieList"></tbody></table>
]]></html>
</example>
</entry>