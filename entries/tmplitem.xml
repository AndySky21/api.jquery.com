<entry type='method' name="tmplItem" return="tmplItem" plugin="jQuery Templates">
<download>
<p>This documentation topic concerns the <em> jQuery Templates</em> plugin (jquery-tmpl), which can be downloaded from: <a href="http://github.com/jquery/jquery-tmpl">http://github.com/jquery/jquery-tmpl</a>.</p>
</download>
<signature>
<added>1.4.3</added>
</signature>
<desc>Return the <code>tmplItem</code> data structure for the rendered template that the matched element is part of.</desc>

<longdesc>
<p>Note: For information about how to render templates, see <a href="http://api.jquery.com/tmpl">.tmpl()</a> and <a href="http://api.jquery.com/jquery.tmpl">jQuery.tmpl()</a>.</p>
<p>
<code>$(selector).tmplItem()</code> provides access to the rendered template item which the target element of the selector is part of.
</p>
<p>See also <a href="http://api.jquery.com/jquery.tmplitem/">jQuery.tmplItem()</a>.</p>
<p>
The return value of <code>tmplItem()</code> is a <code>tmplItem</code> data structure whose fields provide access to:</p>
<ul>
<li>The HTML elements that the template item is made up of (<i>nodes</i> field).</li>
<li>The associated data item (<i>data</i> field).</li>
<li>The parent template item, if the template is nested (<i>parent</i> field).</li>
<li>The template that was used to render the template item (<i>tmpl</i> field).</li>
<li>User defined parameters or methods, such as any values that were set on the <code>options</code> map, passed to <code>tmpl()</code> when the template was rendered.</li>
</ul>
<p>
The following example shows how to use <code>.tmplItem()</code> to get information about the rendered template:</p>
<pre>
var tmplItem = $( selector ).tmplItem();
alert( "Description: " + tmplItem.data.description );
</pre>

<h4 id="building-ajax-apps">Building Interactive Ajax Applications</h4>
<p>
<code>.tmplItem()</code> and <code>jQuery.tmplItem()</code> make it easy to use templates in scenarios beyond simple string concatenation and read-only rendering. They let you create fully-fledged interactive client-side Ajax applications in which the code needs to perform actions like the following:</p>
<ul>
<li>Accessing the associated data item.</li>
<li>Modifying the data item.</li>
<li>Accessing HTML elements that make up the rendered template item.</li>
<li>Updating (re-rendering) the template item, with modified data, modified user-defined parameters, or using a different template</li>
</ul>

<p><strong>Example:</strong> Access data and HTML elements for a template item.:</p>
<pre>
// Get the template item for an element
var tmplItem = $( selector ).tmplItem();

// Get the corresponding data item and HTML nodes
var movieData = tmplItem.data;
var htmlNodes = tmplItem.nodes;

// Modify style
$( htmlNodes ).css( "backgroundColor", color );

// Access data
alert( "&#39;" + movieData.Name + "&#39; was released in "
        + movieData.ReleaseYear + "." );
</pre>

<p>The following example is from the Master Detail sample, below. It uses <code>.tmplItem()</code> to set selection on the new item that is added to the list:</p>
<pre>
$("#addBtn").click( function () {
    // Add a new item to the data array
    people.push( { firstName: "first", lastName: "last" } );

    // Render the template with the new data
    renderTemplate( "#peopleList", "#listItemTemplate", people );

    // Find the added template item
    var addedTmplItem = $("#peopleList tr:last").tmplItem();
    
    // Set selection on the added item
    select ( addedTmplItem );
});
</pre>
    

</longdesc>

<example>
<desc>Access the template item of matched element, to show data and to modify CSS styles on the rendered template.</desc>
<js src="http://code.jquery.com/jquery-latest.min.js" />
<js src="http://ajax.microsoft.com/ajax/jquery.templates/beta1/jquery.tmpl.min.js" />
<code><![CDATA[
var movies = [ 
    { Name: "The Red Violin", ReleaseYear: "1998" },
    { Name: "Eyes Wide Shut", ReleaseYear: "1999" },
    { Name: "The Inheritance", ReleaseYear: "1976" }
];
var color = "aqua"; 
/* Render the template with the movies data */
$( "#movieTemplate" ).tmpl( movies )
    .appendTo( "#movieList" );

$( "#lastItemBtn" ).click( function() {
    /* Flip the color */
    color = (color === "aqua" ? "yellow" : "aqua");

    /* Get the data structure for the last
       template item in the list */
    var lastTmplItem = $( "li:last" ).tmplItem();

    /* Get the corresponding data item and HTML nodes */
    var movie = lastTmplItem.data;
    var htmlNodes = lastTmplItem.nodes;

    /* Switch the background color */
    $( htmlNodes ).css( "backgroundColor", color );

    /* Acces the data */
    alert( "'" + movie.Name + "' was released in " + movie.ReleaseYear + "." );
});
]]></code>
<html><![CDATA[
<tmpl id="movieTemplate" type="text/x-jquery-tmpl">
    <li>
        <b>${Name}</b>
    </li>
</tmpl>

<button id="lastItemBtn">Details of last movie</button>

<ul id="movieList"></ul>
]]></html> 
</example> 

<example>
<desc>Editable master detail view.</desc>
<js src="http://code.jquery.com/jquery-latest.min.js" /> 
<js src="http://ajax.microsoft.com/ajax/jquery.templates/beta1/jquery.tmpl.min.js" /> 
<code><![CDATA[
var people = [
    { firstName: "Peter", lastName: "Jones" },
    { firstName: "Eva", lastName: "Smolinski" }
];

var selectedItem = null;

function renderTemplate( container, template, data ) {
    $( container ).empty();
    $( template ).tmpl( data ).appendTo( container );
}

/* Render the list */
renderTemplate( "#peopleList", "#listItemTemplate", people );

function select( tmplItem ) {
    if ( selectedItem ) {
        $( selectedItem.nodes ).removeClass( "selected");
    }
    $( tmplItem.nodes ).addClass( "selected");
    selectedItem = tmplItem;

    /* Render the detail view for this data item */
    renderTemplate( "#personDetail", "#detailTemplate", tmplItem.data );
}

$("#addBtn").click( function () {
    /* Add a new item to the data array */
    people.push( { firstName: "first", lastName: "last" } );

    /* Render the template with the new data */
    renderTemplate( "#peopleList", "#listItemTemplate", people );

    /* Find the added template item */
    var addedTmplItem = $("#peopleList tr:last").tmplItem();
    
    /* Set selection on the added item */
    select ( addedTmplItem );
});

$("#peopleList")
    .delegate( "tr", "click", function () {
        /* Set selection on the clicked item */
        select ( $.tmplItem(this) );
    });

$("#personDetail")
    .delegate( "input", "change", function () {
        /* Set the data to the modified value */
        $.tmplItem(this).data[ this.name ] = this.value;
        
        /* Render the list, to show the updated data */ 
        renderTemplate( "#peopleList", "#listItemTemplate", people );
    });
]]></code>
<css><![CDATA[
  table {cursor:pointer;border-collapse:collapse;float:left;clear:both;} 
  table tr {border:1px solid blue;color:blue;height:25px;} 
  table tr:hover {color:red;}
  table, #personDetail > div {border:2px solid blue;width:230px;
                     margin:4px 0 4px 4px;
                     background-color:#f8f8f8;} 
  table td, #personDetail div div {padding:3px;margin:3px;}
  .selected {background-color:yellow;} 
  #personDetail input {float:right;width:125px;} 
  #personDetail {float:left;margin-left:10px;} 
  button {float:left;margin:4px;}
]]></css>
<html><![CDATA[
<tmpl id="listItemTemplate" type="text/x-jquery-tmpl"> 
    <tr><td>
        ${firstName} ${lastName} 
    </td></tr>
</tmpl>

<tmpl id="detailTemplate" type="text/x-jquery-tmpl"> 
    <div>
        <div>First Name: <input name="firstName" value="${firstName}"/></div>
        <div>Last Name: <input name="lastName" value="${lastName}"/></div>
    </div>
</tmpl>

<button id="addBtn">Add a person</button>

<table><tbody id="peopleList"></tbody></table>

<div id="personDetail"></div>
]]></html>
</example>
</entry>
