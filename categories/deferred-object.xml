<category id="93" parent="0" name="Deferred Object" slug="deferred-object">
  <desc><p><code>jQuery.Deferred()</code>, introduced in version 1.5, is a chainable utility object that can register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.</p>

<div class="longdesc">

<p>In JavaScript it is common to invoke functions that optionally accept callbacks that are called within that function.

For example, in versions prior to jQuery 1.5, asynchronous processes such as <code>jQuery.ajax()</code> accept callbacks to be invoked some time in the near-future upon success, error, and completion of the ajax request.

<p><code>jQuery.Deferred()</code> introduces several enhancements to the way callbacks are managed and invoked.  In particular, <code>jQuery.Deferred()</code> provides flexible ways to provide multiple callbacks, and these callbacks can be invoked regardless of whether the original callback dispatch has already occurred. jQuery Deferred is based on the <a href="http://wiki.commonjs.org/wiki/Promises/A">CommonJS Promises/A</a> design.</p>

<p>One model for understanding Deferred is to think of it as a chain-aware function wrapper. The <a href="http://api.jquery.com/deferred.then"><code>deferred.then()</code></a>, <a href="http://api.jquery.com/deferred.done"><code>deferred.done()</code></a>, and <a href="http://api.jquery.com/deferred.fail"><code>deferred.fail()</code></a> methods specify the functions to be called and the <a href="http://api.jquery.com/deferred.resolve"><code>deferred.resolve(args)</code></a> or <a href="http://api.jquery.com/deferred.reject"><code>deferred.reject(args)</code></a> methods "call" the functions with the arguments you supply. Once the Deferred has been resolved or rejected it stays in that state; a second call to <code>deferred.resolve()</code> is ignored for example. If more functions are added by <code>deferred.then()</code> after the Deferred is resolved, they are called immediately with the arguments previously provided.</p>

<p>In most cases where a jQuery API call returns a Deferred or Deferred-compatible object, such as <a href="http://api.jquery.com/jQuery.ajax"><code>jQuery.ajax()</code></a> or <a href="http://api.jquery.com/jQuery.when"><code>jQuery.when()</code></a>, you will only want to use the <a href="http://api.jquery.com/deferred.then"><code>deferred.then()</code></a>, <a href="http://api.jquery.com/deferred.done"><code>deferred.done()</code></a>, and <a href="http://api.jquery.com/deferred.fail"><code>deferred.fail()</code></a> methods to add callbacks to the Deferred's queues. The internals of the API call or code that created the Deferred will invoke <a href="http://api.jquery.com/deferred.resolve"><code>deferred.resolve()</code></a> or <a href="http://api.jquery.com/deferred.reject"><code>deferred.reject()</code></a> on the deferred at some point, causing the appropriate callbacks to run.</p>

<h4>jQuery.Deferred Constructor</h4>

<p>The <code>jQuery.Deferred()</code> constructor creates a new Deferred object. The <code>new</code> operator is optional.

<p><code>jQuery.Deferred</code> can be passed an optional function, which is called just before the constructor returns and is passed the constructed <code>deferred</code> object as both the <code>this</code> object and as the first argument to the function. The called function can attach callbacks using <a href="http://api.jquery.com/deferred.then"><code>deferred.then()</code></a> for example.</p>

<p>A Deferred object starts in the <em>pending</em> state. Any callbacks added to the object with <a href="http://api.jquery.com/deferred.then"><code>deferred.then()</code></a>, <a href="http://api.jquery.com/deferred.done"><code>deferred.done()</code></a>, or <a href="http://api.jquery.com/deferred.fail"><code>deferred.fail()</code></a> are queued to be executed later. Calling <a href="http://api.jquery.com/deferred.resolve"><code>deferred.resolve()</code></a> or <a href="http://api.jquery.com/deferred.resolveWith"><code>deferred.resolveWith()</code></a> transitions the Deferred into the <em>resolved</em> state and immediately executes any <code>doneCallbacks</code> that are set. Calling <a href="http://api.jquery.com/deferred.reject"><code>deferred.reject()</code></a> or <a href="http://api.jquery.com/deferred.rejectWith"><code>deferred.rejectWith()</code></a> transitions the Deferred into the <em>rejected</em> state and immediately executes any <code>failCallbacks</code> that are set. Once the object has entered the resolved or rejected state, it stays in that state. Callbacks can still be added to the resolved or rejected Deferred -- they will execute immediately.</p>

<p>The Deferred object is chainable, similar to the way a jQuery object is chainable, but it has its own methods. After creating a Deferred object, you can use any of the methods below by either chaining directly from the object creation or saving the object in a variable and invoking one or more methods on that variable.</p>

</div>
</desc>
</category>
